<!DOCTYPE html>
<!-- saved from url=(0054)http://blog.sunnyxx.com/2014/10/15/behind-autorelease/ -->
<html lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="X-UA-Compatible" content="IE=edge"><title> 黑幕背后的Autorelease · sunnyxx的技术博客</title><meta name="description" content="黑幕背后的Autorelease - sunnyxx"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="short icon" href="http://blog.sunnyxx.com/favicon.ico"><link rel="stylesheet" href="./黑幕背后的Autorelease · sunnyxx的技术博客_files/apollo.css"><script type="text/javascript" async="" src="http://static.duoshuo.com/embed.js" charset="UTF-8"></script></head><body><header><a href="http://blog.sunnyxx.com/" class="logo-link"><img src="./黑幕背后的Autorelease · sunnyxx的技术博客_files/doge-logo.png"></a><ul class="nav nav-list"><li class="nav-list-item"><a href="http://blog.sunnyxx.com/" target="_self" class="nav-list-link">BLOG</a></li><li class="nav-list-item"><a href="http://blog.sunnyxx.com/archives/" target="_self" class="nav-list-link">ARCHIVE</a></li><li class="nav-list-item"><a href="http://weibo.com/1364395395/" target="_blank" class="nav-list-link">WEIBO</a></li><li class="nav-list-item"><a href="https://github.com/forkingdog" target="_blank" class="nav-list-link">GITHUB</a></li><li class="nav-list-item"><a href="http://blog.sunnyxx.com/atom.xml" target="_self" class="nav-list-link">RSS</a></li></ul></header><section class="container"><div class="post"><article class="post-block"><h1 class="post-title">黑幕背后的Autorelease</h1><div class="post-time">2014年10月15日</div><div class="post-content"><h1 id="我是前言"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E6%88%91%E6%98%AF%E5%89%8D%E8%A8%80" class="headerlink" title="我是前言"></a>我是前言</h1><p>Autorelease机制是iOS开发者管理对象内存的好伙伴，MRC中，调用<code>[obj autorelease]</code>来延迟内存的释放是一件简单自然的事，ARC下，我们甚至可以完全不知道Autorelease就能管理好内存。而在这背后，objc和编译器都帮我们做了哪些事呢，它们是如何协作来正确管理内存的呢？刨根问底，一起来探究下黑幕背后的Autorelease机制。</p>
<h1 id="Autorelease对象什么时候释放？"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#Autorelease%E5%AF%B9%E8%B1%A1%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%87%8A%E6%94%BE%EF%BC%9F" class="headerlink" title="Autorelease对象什么时候释放？"></a>Autorelease对象什么时候释放？</h1><p>这个问题拿来做面试题，问过很多人，没有几个能答对的。很多答案都是“当前作用域大括号结束时释放”，显然木有正确理解Autorelease机制。<br>在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的<code>runloop</code>迭代结束时释放的，而它能够释放的原因是<strong>系统在每个runloop迭代中都加入了自动释放池Push和Pop</strong>  </p>
<h2 id="小实验"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E5%B0%8F%E5%AE%9E%E9%AA%8C" class="headerlink" title="小实验"></a>小实验</h2><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">id</span> reference = <span class="literal">nil</span>;</span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad {</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"sunnyxx"</span>];</span><br><span class="line">    <span class="comment">// str是一个autorelease对象，设置一个weak的引用来观察它</span></span><br><span class="line">    reference = str;</span><br><span class="line">}</span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated {</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, reference); <span class="comment">// Console: sunnyxx</span></span><br><span class="line">}</span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated {</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, reference); <span class="comment">// Console: (null)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><del>这个实验同时也证明了<code>viewDidLoad</code>和<code>viewWillAppear</code>是在同一个runloop调用的，而<code>viewDidAppear</code>是在之后的某个runloop调用的。</del><br>由于这个vc在loadView之后便add到了window层级上，所以<code>viewDidLoad</code>和<code>viewWillAppear</code>是在同一个runloop调用的，因此在<code>viewWillAppear</code>中，这个autorelease的变量依然有值。  </p>
<p>当然，我们也可以手动干预Autorelease对象的释放时机：</p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad {</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> {</span><br><span class="line">        <span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"sunnyxx"</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str); <span class="comment">// Console: (null)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Autorelease原理"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#Autorelease%E5%8E%9F%E7%90%86" class="headerlink" title="Autorelease原理"></a>Autorelease原理</h1><h2 id="AutoreleasePoolPage"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#AutoreleasePoolPage" class="headerlink" title="AutoreleasePoolPage"></a>AutoreleasePoolPage</h2><p>ARC下，我们使用<code>@autoreleasepool{}</code>来使用一个AutoreleasePool，随后编译器将其改写成下面的样子：  </p>
<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void *context = objc_autoreleasePoolPush();</span><br><span class="line">// {}中的代码</span><br><span class="line">objc_autoreleasePoolPop(context);</span><br></pre></td></tr></tbody></table></figure>
<p>而这两个函数都是对<code>AutoreleasePoolPage</code>的简单封装，所以自动释放机制的核心就在于这个类。  </p>
<p>AutoreleasePoolPage是一个C++实现的类</p>
<p><img src="./黑幕背后的Autorelease · sunnyxx的技术博客_files/51530583gw1elj2ugt21wj20f109m3zl.jpg" alt=""></p>
<ul>
<li>AutoreleasePool并没有单独的结构，而是由若干个AutoreleasePoolPage以<code>双向链表</code>的形式组合而成（分别对应结构中的parent指针和child指针）</li>
<li>AutoreleasePool是按线程一一对应的（结构中的thread指针指向当前线程）</li>
<li>AutoreleasePoolPage每个对象会开辟4096字节内存（也就是虚拟内存一页的大小），除了上面的实例变量所占空间，剩下的空间全部用来储存autorelease对象的地址</li>
<li>上面的<code>id *next</code>指针作为游标指向栈顶最新add进来的autorelease对象的下一个位置</li>
<li>一个AutoreleasePoolPage的空间被占满时，会新建一个AutoreleasePoolPage对象，连接链表，后来的autorelease对象在新的page加入</li>
</ul>
<p>所以，若当前线程中只有一个AutoreleasePoolPage对象，并记录了很多autorelease对象地址时内存如下图：</p>
<p><img src="./黑幕背后的Autorelease · sunnyxx的技术博客_files/51530583gw1elj5gvphtqj20dy0cx756.jpg" alt=""></p>
<p>图中的情况，这一页再加入一个autorelease对象就要满了（也就是next指针马上指向栈顶），这时就要执行上面说的操作，建立下一页page对象，与这一页链表连接完成后，新page的<code>next</code>指针被初始化在栈底（begin的位置），然后继续向栈顶添加新对象。</p>
<p><strong>所以，向一个对象发送<code>- autorelease</code>消息，就是将这个对象加入到当前AutoreleasePoolPage的栈顶next指针指向的位置</strong></p>
<h2 id="释放时刻"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E9%87%8A%E6%94%BE%E6%97%B6%E5%88%BB" class="headerlink" title="释放时刻"></a>释放时刻</h2><p>每当进行一次<code>objc_autoreleasePoolPush</code>调用时，runtime向当前的AutoreleasePoolPage中add进一个<code>哨兵对象</code>，值为0（也就是个nil），那么这一个page就变成了下面的样子：  </p>
<p><img src="./黑幕背后的Autorelease · sunnyxx的技术博客_files/51530583gw1elj5z7hawej20ji0dewff.jpg" alt=""></p>
<p><code>objc_autoreleasePoolPush</code>的返回值正是这个哨兵对象的地址，被<code>objc_autoreleasePoolPop(哨兵对象)</code>作为入参，于是：</p>
<ol>
<li>根据传入的哨兵对象地址找到哨兵对象所处的page</li>
<li>在当前page中，将晚于哨兵对象插入的所有autorelease对象都发送一次<code>- release</code>消息，并向回移动<code>next</code>指针到正确位置</li>
<li>补充2：从最新加入的对象一直向前清理，可以向前跨越若干个page，直到哨兵所在的page</li>
</ol>
<p>刚才的objc_autoreleasePoolPop执行后，最终变成了下面的样子：  </p>
<p><img src="./黑幕背后的Autorelease · sunnyxx的技术博客_files/51530583gw1elj6u2i3fyj20dz0bqdgi.jpg" alt=""></p>
<h2 id="嵌套的AutoreleasePool"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E5%B5%8C%E5%A5%97%E7%9A%84AutoreleasePool" class="headerlink" title="嵌套的AutoreleasePool"></a>嵌套的AutoreleasePool</h2><p>知道了上面的原理，嵌套的AutoreleasePool就非常简单了，pop的时候总会释放到上次push的位置为止，多层的pool就是多个哨兵对象而已，就像剥洋葱一样，每次一层，互不影响。</p>
<hr>
<p>【附加内容】</p>
<h1 id="Autorelease返回值的快速释放机制"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#Autorelease%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%8A%E6%94%BE%E6%9C%BA%E5%88%B6" class="headerlink" title="Autorelease返回值的快速释放机制"></a>Autorelease返回值的快速释放机制</h1><p>值得一提的是，ARC下，runtime有一套对autorelease返回值的优化策略。<br>比如一个工厂方法：</p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)createSark {</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> new];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// caller</span></span><br><span class="line">Sark *sark = [Sark createSark];</span><br></pre></td></tr></tbody></table></figure>
<p>秉着谁创建谁释放的原则，返回值需要是一个autorelease对象才能配合调用方正确管理内存，于是乎编译器改写成了形如下面的代码：</p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)createSark {</span><br><span class="line">    <span class="keyword">id</span> tmp = [<span class="keyword">self</span> new];</span><br><span class="line">    <span class="keyword">return</span> objc_autoreleaseReturnValue(tmp); <span class="comment">// 代替我们调用autorelease</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// caller</span></span><br><span class="line"><span class="keyword">id</span> tmp = objc_retainAutoreleasedReturnValue([Sark createSark]) <span class="comment">// 代替我们调用retain</span></span><br><span class="line">Sark *sark = tmp;</span><br><span class="line">objc_storeStrong(&amp;sark, <span class="literal">nil</span>); <span class="comment">// 相当于代替我们调用了release</span></span><br></pre></td></tr></tbody></table></figure>
<p>一切看上去都很好，不过既然编译器知道了这么多信息，干嘛还要劳烦autorelease这个开销不小的机制呢？于是乎，runtime使用了一些黑魔法将这个问题解决了。</p>
<h2 id="黑魔法之Thread-Local-Storage"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E9%BB%91%E9%AD%94%E6%B3%95%E4%B9%8BThread-Local-Storage" class="headerlink" title="黑魔法之Thread Local Storage"></a>黑魔法之Thread Local Storage</h2><p>Thread Local Storage（TLS）线程局部存储，目的很简单，将一块内存作为某个线程专有的存储，以key-value的形式进行读写，比如在非arm架构下，使用pthread提供的方法实现：  </p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* pthread_getspecific(pthread_key_t);</span><br><span class="line"><span class="keyword">int</span> pthread_setspecific(pthread_key_t , <span class="keyword">const</span> <span class="keyword">void</span> *);</span><br></pre></td></tr></tbody></table></figure>
<p>说它是黑魔法可能被懂pthread的笑话- -  </p>
<p>在返回值身上调用<code>objc_autoreleaseReturnValue</code>方法时，runtime将这个返回值object储存在TLS中，然后直接返回这个object（不调用autorelease）；同时，在外部接收这个返回值的<code>objc_retainAutoreleasedReturnValue</code>里，发现TLS中正好存了这个对象，那么直接返回这个object（不调用retain）。<br>于是乎，调用方和被调方利用TLS做中转，很有默契的免去了对返回值的内存管理。  </p>
<p>于是问题又来了，假如被调方和主调方只有一边是ARC环境编译的该咋办？（比如我们在ARC环境下用了非ARC编译的第三方库，或者反之）<br>只能动用更高级的黑魔法。  </p>
<h2 id="黑魔法之-builtin-return-address"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E9%BB%91%E9%AD%94%E6%B3%95%E4%B9%8B-builtin-return-address" class="headerlink" title="黑魔法之__builtin_return_address"></a>黑魔法之__builtin_return_address</h2><p>这个内建函数原型是<code>char *__builtin_return_address(int level)</code>，作用是得到函数的返回地址，参数表示层数，如__builtin_return_address(0)表示当前函数体返回地址，传1是调用这个函数的外层函数的返回值地址，以此类推。</p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">int</span>)foo {</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>, __builtin_return_address(<span class="number">0</span>)); <span class="comment">// 根据这个地址能找到下面ret的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// caller</span></span><br><span class="line"><span class="keyword">int</span> ret = [sark foo];</span><br></pre></td></tr></tbody></table></figure>
<p>看上去也没啥厉害的，不过要知道，函数的返回值地址，也就对应着调用者结束这次调用的地址（或者相差某个固定的偏移量，根据编译器决定）<br>也就是说，被调用的函数也有翻身做地主的机会了，可以反过来对主调方干点坏事。<br>回到上面的问题，<strong>如果一个函数返回前知道调用方是ARC还是非ARC，就有机会对于不同情况做不同的处理</strong></p>
<h2 id="黑魔法之反查汇编指令"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E9%BB%91%E9%AD%94%E6%B3%95%E4%B9%8B%E5%8F%8D%E6%9F%A5%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4" class="headerlink" title="黑魔法之反查汇编指令"></a>黑魔法之反查汇编指令</h2><p>通过上面的__builtin_return_address加某些偏移量，被调方可以定位到主调方在返回值后面的<code>汇编指令</code>：  </p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// caller</span></span><br><span class="line"><span class="keyword">int</span> ret = [sark foo];</span><br><span class="line"><span class="comment">// 内存中接下来的汇编指令（x86，我不懂汇编，瞎写的）</span></span><br><span class="line">movq ??? ???</span><br><span class="line">callq ???</span><br></pre></td></tr></tbody></table></figure>
<p>而这些汇编指令在内存中的值是固定的，比如movq对应着0x48。<br>于是乎，就有了下面的这个函数，入参是调用方__builtin_return_address传入值</p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> callerAcceptsFastAutorelease(<span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">const</span> ra0) {</span><br><span class="line">    <span class="keyword">const</span> uint8_t *ra1 = (<span class="keyword">const</span> uint8_t *)ra0;</span><br><span class="line">    <span class="keyword">const</span> uint16_t *ra2;</span><br><span class="line">    <span class="keyword">const</span> uint32_t *ra4 = (<span class="keyword">const</span> uint32_t *)ra1;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span> **sym;</span><br><span class="line">    <span class="comment">// 48 89 c7    movq  %rax,%rdi</span></span><br><span class="line">    <span class="comment">// e8          callq symbol</span></span><br><span class="line">    <span class="keyword">if</span> (*ra4 != <span class="number">0xe8c78948</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    ra1 += (<span class="keyword">long</span>)*(<span class="keyword">const</span> int32_t *)(ra1 + <span class="number">4</span>) + <span class="number">8</span>l;</span><br><span class="line">    ra2 = (<span class="keyword">const</span> uint16_t *)ra1;</span><br><span class="line">    <span class="comment">// ff 25       jmpq *symbol@DYLDMAGIC(%rip)</span></span><br><span class="line">    <span class="keyword">if</span> (*ra2 != <span class="number">0x25ff</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    ra1 += <span class="number">6</span>l + (<span class="keyword">long</span>)*(<span class="keyword">const</span> int32_t *)(ra1 + <span class="number">2</span>);</span><br><span class="line">    sym = (<span class="keyword">const</span> <span class="keyword">void</span> **)ra1;</span><br><span class="line">    <span class="keyword">if</span> (*sym != objc_retainAutoreleasedReturnValue)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>它检验了主调方在返回值之后是否紧接着调用了<code>objc_retainAutoreleasedReturnValue</code>，如果是，就知道了外部是ARC环境，反之就走没被优化的老逻辑。</p>
<h1 id="其他Autorelease相关知识点"><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/#%E5%85%B6%E4%BB%96Autorelease%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9" class="headerlink" title="其他Autorelease相关知识点"></a>其他Autorelease相关知识点</h1><p>使用容器的block版本的枚举器时，内部会自动添加一个AutoreleasePool：  </p>
<figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[array enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) {</span><br><span class="line">    <span class="comment">// 这里被一个局部@autoreleasepool包围着</span></span><br><span class="line">}];</span><br></pre></td></tr></tbody></table></figure>
<p>当然，在普通for循环和for in循环中没有，所以，还是新版的block版本枚举器更加方便。for循环中遍历产生大量autorelease变量时，就需要手加局部AutoreleasePool咯。</p>
</div></article></div></section><footer><div class="paginator"><a href="http://blog.sunnyxx.com/2014/11/06/runtime-nuts/" class="prev">上一篇</a><a href="http://blog.sunnyxx.com/2014/10/14/fp-essential/" class="next">下一篇</a></div><div data-thread-key="2014/10/15/behind-autorelease/" data-title="黑幕背后的Autorelease" data-url="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" data-author-key="1" class="ds-thread"></div><script>var duoshuoQuery = {short_name:"sunnyxx"};
(function() {
    var ds = document.createElement('script');
    ds.type = 'text/javascript';ds.async = true;
    ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
    ds.charset = 'UTF-8';
    (document.getElementsByTagName('head')[0] 
     || document.getElementsByTagName('body')[0]).appendChild(ds);
})();

</script><div class="copyright"><p>原创文章，版权声明：署名-非商业性使用-相同方式共享 2.5 </p><p>对博主感兴趣？微信订阅号中关注 sunnyxx 或关注微博<a href="http://weibo.com/1364395395/">@我就叫Sunny怎么了</a></p><p>© 2015 - 2016  <a href="http://blog.sunnyxx.com/">sunnyxx</a> | Powered by Hexo</p></div></footer></body></html>